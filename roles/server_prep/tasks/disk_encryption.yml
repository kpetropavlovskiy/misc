---
- name: Ensure cryptsetup is installed
  package:
    name: cryptsetup
    state: present

- name: Validate encryption method
  fail:
    msg: "encryption_method must be either 'passphrase' or 'keyfile'"
  when: encryption_method not in ['passphrase', 'keyfile']

- name: Check if encryption disk exists
  stat:
    path: "{{ encryption_disk }}"
  register: disk_partition

- name: Fail if disk partition doesn't exist
  fail:
    msg: "Disk partition {{ encryption_disk }} does not exist!"
  when: not disk_partition.stat.exists

- name: Check if disk is already encrypted
  command: cryptsetup isLuks {{ encryption_disk }}
  register: luks_info
  ignore_errors: true
  changed_when: false

- name: Check if disk is currently mounted (only if not encrypted)
  command: findmnt -n -o TARGET {{ encryption_disk }}
  register: disk_mounted
  failed_when: disk_mounted.rc > 1
  changed_when: false
  when: luks_info.rc != 0

- name: Fail if disk is mounted (only if not encrypted)
  fail:
    msg: "Disk {{ encryption_disk }} is currently mounted at {{ disk_mounted.stdout }}. Unmount it first."
  when:
    - luks_info.rc != 0
    - disk_mounted is defined
    - disk_mounted.rc == 0

# ============================
# Keyfile: primary LUKS initialization
# ============================
- block:
    - name: Create encryption keyfile
      copy:
        content: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,punctuation') }}"
        dest: "{{ encryption_keyfile }}"
        mode: '0600'
        owner: root
        group: root
      no_log: true

    - name: Create encrypted partition with keyfile
      community.crypto.luks_device:
        device: "{{ encryption_disk }}"
        state: present
        keyfile: "{{ encryption_keyfile }}"
        keyslot: 0
      no_log: true

  when:
    - luks_info.rc != 0
    - encryption_method == 'keyfile'

# ============================
# Passphrase: primary LUKS initialization
# ============================
- block:
    - name: Request encryption passphrase
      pause:
        prompt: "Enter passphrase for disk encryption {{ encryption_disk }}"
        echo: no
      register: encryption_passphrase

    - name: Create encrypted partition with passphrase
      community.crypto.luks_device:
        device: "{{ encryption_disk }}"
        state: present
        passphrase: "{{ encryption_passphrase.user_input }}"
        keyslot: 0
      no_log: true

  when:
    - luks_info.rc != 0
    - encryption_method == 'passphrase'

# ============================
# Reserve auth method
# ============================
- name: Add backup authentication method
  block:
    - name: Add backup passphrase (if primary is keyfile)
      community.crypto.luks_device:
        device: "{{ encryption_disk }}"
        state: present
        passphrase: "{{ lookup('password', '/dev/null length=32') }}"
        keyslot: 1
      no_log: true
      when: encryption_method == 'keyfile'

    - name: Add backup keyfile (if primary is passphrase)
      community.crypto.luks_device:
        device: "{{ encryption_disk }}"
        state: present
        keyfile: "{{ encryption_keyfile }}"
        keyslot: 1
      no_log: true
      when: encryption_method == 'passphrase'

  when: luks_info.rc != 0

# ============================
# Keyfile: FileSystem creation
# ============================
- block:
    - name: Open LUKS device to (maybe) create filesystem
      community.crypto.luks_device:
        device: "{{ encryption_disk }}"
        state: opened
        name: "{{ encryption_name }}"
        keyfile: "{{ encryption_keyfile }}"
      no_log: true

    - name: Check if filesystem exists on mapped device
      command: blkid -o value -s TYPE /dev/mapper/{{ encryption_name }}
      register: fs_check
      failed_when: false
      changed_when: false

    - name: Create filesystem on the encrypted device if none
      filesystem:
        fstype: "{{ encryption_fstype }}"
        dev: "/dev/mapper/{{ encryption_name }}"
      when: fs_check.rc != 0

    - name: Close LUKS device after filesystem init
      community.crypto.luks_device:
        name: "{{ encryption_name }}"
        state: closed

  when:
    - luks_info.rc != 0
    - encryption_method == 'keyfile'

# ============================
# Keyfile: automount
# ============================
- block:
    - name: Ensure mount directory exists
      file:
        path: "{{ encryption_mount }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure crypttab entry exists (auto-decrypt on boot)
      community.general.crypttab:
        name: "{{ encryption_name }}"
        backing_device: "{{ encryption_disk }}"
        password: "{{ encryption_keyfile }}"        
        state: present

    - name: Ensure LUKS mapping is opened for mounting now
      community.crypto.luks_device:
        device: "{{ encryption_disk }}"
        state: opened
        name: "{{ encryption_name }}"
        keyfile: "{{ encryption_keyfile }}"
      no_log: true

    - name: Ensure mounted now and in fstab
      ansible.posix.mount:
        path: "{{ encryption_mount }}"
        src: "/dev/mapper/{{ encryption_name }}"
        fstype: "{{ encryption_fstype }}"
        opts: "{{ encryption_mount_options }}"
        state: mounted

  when: encryption_method == 'keyfile'

# ============================
# Passphrase: notification
# ============================
- name: Notify user about automount limitation
  debug:
    msg: |
      Automount not configured: encryption_method=passphrase requires manual input at boot.
      Manual example:
      sudo cryptsetup open {{ encryption_disk }} {{ encryption_name }} \
        && sudo mount /dev/mapper/{{ encryption_name }} {{ encryption_mount }}
  when: encryption_method == 'passphrase'